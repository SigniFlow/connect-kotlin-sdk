/**
* SigniFlow OpenAPI Spec v1
* ## SigniFlow API used to automate esignature workflow creation and management. 
*
* The version of the OpenAPI document: 1.0
* Contact: support@signiflow.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package SigniFlow.Connect.apis

import SigniFlow.Connect.models.CreatePortfolioRequest
import SigniFlow.Connect.models.CreatePortfolioResponse
import SigniFlow.Connect.models.DownloadPortfolioRequest
import SigniFlow.Connect.models.DownloadPortfolioResponse
import SigniFlow.Connect.models.LinkToPortfolioRequest
import SigniFlow.Connect.models.LinkToPortfolioResponse
import SigniFlow.Connect.models.SetDocumentOrderRequest
import SigniFlow.Connect.models.SetDocumentOrderResponse
import SigniFlow.Connect.models.SharePortfolioNoEmailRequest
import SigniFlow.Connect.models.SharePortfolioNoEmailResponse
import SigniFlow.Connect.models.SharePortfolioRequest
import SigniFlow.Connect.models.SharePortfolioResponse

import SigniFlow.Connect.infrastructure.ApiClient
import SigniFlow.Connect.infrastructure.ClientException
import SigniFlow.Connect.infrastructure.ClientError
import SigniFlow.Connect.infrastructure.ServerException
import SigniFlow.Connect.infrastructure.ServerError
import SigniFlow.Connect.infrastructure.MultiValueMap
import SigniFlow.Connect.infrastructure.RequestConfig
import SigniFlow.Connect.infrastructure.RequestMethod
import SigniFlow.Connect.infrastructure.ResponseType
import SigniFlow.Connect.infrastructure.Success
import SigniFlow.Connect.infrastructure.toMultiValue

class PortfoliosApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("SigniFlow.Connect.baseUrl", "https://server-url/API/SignFlowAPIServiceRest.svc")
        }
    }

    /**
    * Create Portfolio
    * #### Used to create a portfolio to group documents.
    * @param contentType  
    * @param createPortfolioRequest ##### Create Portfolio Request Model (optional)
    * @return CreatePortfolioResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postCreatePortfolio(contentType: kotlin.String, createPortfolioRequest: CreatePortfolioRequest?) : CreatePortfolioResponse {
        val localVariableConfig = postCreatePortfolioRequestConfig(contentType = contentType, createPortfolioRequest = createPortfolioRequest)

        val localVarResponse = request<CreatePortfolioResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreatePortfolioResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postCreatePortfolio
    *
    * @param contentType  
    * @param createPortfolioRequest ##### Create Portfolio Request Model (optional)
    * @return RequestConfig
    */
    fun postCreatePortfolioRequestConfig(contentType: kotlin.String, createPortfolioRequest: CreatePortfolioRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = createPortfolioRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/CreatePortfolio",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Download Portfolio
    * #### Used to return a string that is then used to download a portfolio.
    * @param contentType  
    * @param downloadPortfolioRequest ##### Download Portfolio Request Model (optional)
    * @return DownloadPortfolioResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postDownloadPortfolio(contentType: kotlin.String, downloadPortfolioRequest: DownloadPortfolioRequest?) : DownloadPortfolioResponse {
        val localVariableConfig = postDownloadPortfolioRequestConfig(contentType = contentType, downloadPortfolioRequest = downloadPortfolioRequest)

        val localVarResponse = request<DownloadPortfolioResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DownloadPortfolioResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postDownloadPortfolio
    *
    * @param contentType  
    * @param downloadPortfolioRequest ##### Download Portfolio Request Model (optional)
    * @return RequestConfig
    */
    fun postDownloadPortfolioRequestConfig(contentType: kotlin.String, downloadPortfolioRequest: DownloadPortfolioRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = downloadPortfolioRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/DownloadPortfolio",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Link To Portfolio
    * #### Used to get the url link to a portfolio.
    * @param contentType  
    * @param linkToPortfolioRequest ##### Link To Portfolio Request Model (optional)
    * @return LinkToPortfolioResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postLinkToPortfolio(contentType: kotlin.String, linkToPortfolioRequest: LinkToPortfolioRequest?) : LinkToPortfolioResponse {
        val localVariableConfig = postLinkToPortfolioRequestConfig(contentType = contentType, linkToPortfolioRequest = linkToPortfolioRequest)

        val localVarResponse = request<LinkToPortfolioResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LinkToPortfolioResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postLinkToPortfolio
    *
    * @param contentType  
    * @param linkToPortfolioRequest ##### Link To Portfolio Request Model (optional)
    * @return RequestConfig
    */
    fun postLinkToPortfolioRequestConfig(contentType: kotlin.String, linkToPortfolioRequest: LinkToPortfolioRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = linkToPortfolioRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/LinkToPortfolio",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Set Document Order
    * #### Used to set the order of documents that needs to be signed.
    * @param contentType  
    * @param setDocumentOrderRequest ##### Set Document Order Request Model (optional)
    * @return SetDocumentOrderResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postSetDocumentOrder(contentType: kotlin.String, setDocumentOrderRequest: SetDocumentOrderRequest?) : SetDocumentOrderResponse {
        val localVariableConfig = postSetDocumentOrderRequestConfig(contentType = contentType, setDocumentOrderRequest = setDocumentOrderRequest)

        val localVarResponse = request<SetDocumentOrderResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SetDocumentOrderResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postSetDocumentOrder
    *
    * @param contentType  
    * @param setDocumentOrderRequest ##### Set Document Order Request Model (optional)
    * @return RequestConfig
    */
    fun postSetDocumentOrderRequestConfig(contentType: kotlin.String, setDocumentOrderRequest: SetDocumentOrderRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = setDocumentOrderRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/SetDocumentOrder",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Share Portfolio
    * #### Used when a user wants to share a portfolio with someone else.
    * @param contentType  
    * @param sharePortfolioRequest ##### Share Portfolio Request Model (optional)
    * @return SharePortfolioResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postSharePortfolio(contentType: kotlin.String, sharePortfolioRequest: SharePortfolioRequest?) : SharePortfolioResponse {
        val localVariableConfig = postSharePortfolioRequestConfig(contentType = contentType, sharePortfolioRequest = sharePortfolioRequest)

        val localVarResponse = request<SharePortfolioResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SharePortfolioResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postSharePortfolio
    *
    * @param contentType  
    * @param sharePortfolioRequest ##### Share Portfolio Request Model (optional)
    * @return RequestConfig
    */
    fun postSharePortfolioRequestConfig(contentType: kotlin.String, sharePortfolioRequest: SharePortfolioRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = sharePortfolioRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/SharePortfolio",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Share Portfolio No Email
    * #### Used when a user wants to share a portfolio without sending out an email.
    * @param contentType  
    * @param sharePortfolioNoEmailRequest ##### Share Portfolio No Email Request Model (optional)
    * @return SharePortfolioNoEmailResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postSharePortfolioNoEmail(contentType: kotlin.String, sharePortfolioNoEmailRequest: SharePortfolioNoEmailRequest?) : SharePortfolioNoEmailResponse {
        val localVariableConfig = postSharePortfolioNoEmailRequestConfig(contentType = contentType, sharePortfolioNoEmailRequest = sharePortfolioNoEmailRequest)

        val localVarResponse = request<SharePortfolioNoEmailResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SharePortfolioNoEmailResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postSharePortfolioNoEmail
    *
    * @param contentType  
    * @param sharePortfolioNoEmailRequest ##### Share Portfolio No Email Request Model (optional)
    * @return RequestConfig
    */
    fun postSharePortfolioNoEmailRequestConfig(contentType: kotlin.String, sharePortfolioNoEmailRequest: SharePortfolioNoEmailRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = sharePortfolioNoEmailRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/SharePortfolio_No_Email",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
