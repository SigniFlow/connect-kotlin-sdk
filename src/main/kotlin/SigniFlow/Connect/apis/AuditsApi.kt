/**
* SigniFlow OpenAPI Spec v1
* ## SigniFlow API used to automate esignature workflow creation and management. 
*
* The version of the OpenAPI document: 1.0
* Contact: support@signiflow.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package SigniFlow.Connect.apis

import SigniFlow.Connect.models.GetAuditDocumentRequest
import SigniFlow.Connect.models.GetAuditDocumentResponse
import SigniFlow.Connect.models.GetDocumentAuditRequest
import SigniFlow.Connect.models.GetDocumentAuditResponse

import SigniFlow.Connect.infrastructure.ApiClient
import SigniFlow.Connect.infrastructure.ClientException
import SigniFlow.Connect.infrastructure.ClientError
import SigniFlow.Connect.infrastructure.ServerException
import SigniFlow.Connect.infrastructure.ServerError
import SigniFlow.Connect.infrastructure.MultiValueMap
import SigniFlow.Connect.infrastructure.RequestConfig
import SigniFlow.Connect.infrastructure.RequestMethod
import SigniFlow.Connect.infrastructure.ResponseType
import SigniFlow.Connect.infrastructure.Success
import SigniFlow.Connect.infrastructure.toMultiValue

class AuditsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("SigniFlow.Connect.baseUrl", "https://server-url/API/SignFlowAPIServiceRest.svc")
        }
    }

    /**
    * Get Audit Document
    * #### Used to get an audit document.
    * @param contentType  
    * @param getAuditDocumentRequest ##### Get Audit Document Request Model (optional)
    * @return GetAuditDocumentResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postGetAuditDocument(contentType: kotlin.String, getAuditDocumentRequest: GetAuditDocumentRequest?) : GetAuditDocumentResponse {
        val localVariableConfig = postGetAuditDocumentRequestConfig(contentType = contentType, getAuditDocumentRequest = getAuditDocumentRequest)

        val localVarResponse = request<GetAuditDocumentResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetAuditDocumentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postGetAuditDocument
    *
    * @param contentType  
    * @param getAuditDocumentRequest ##### Get Audit Document Request Model (optional)
    * @return RequestConfig
    */
    fun postGetAuditDocumentRequestConfig(contentType: kotlin.String, getAuditDocumentRequest: GetAuditDocumentRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = getAuditDocumentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/GetAuditDocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Get Document Audit
    * #### Used to get the audit information from a document.
    * @param contentType  
    * @param getDocumentAuditRequest ##### Get Document Audit Request Model (optional)
    * @return GetDocumentAuditResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postGetDocumentAudit(contentType: kotlin.String, getDocumentAuditRequest: GetDocumentAuditRequest?) : GetDocumentAuditResponse {
        val localVariableConfig = postGetDocumentAuditRequestConfig(contentType = contentType, getDocumentAuditRequest = getDocumentAuditRequest)

        val localVarResponse = request<GetDocumentAuditResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetDocumentAuditResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postGetDocumentAudit
    *
    * @param contentType  
    * @param getDocumentAuditRequest ##### Get Document Audit Request Model (optional)
    * @return RequestConfig
    */
    fun postGetDocumentAuditRequestConfig(contentType: kotlin.String, getDocumentAuditRequest: GetDocumentAuditRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = getDocumentAuditRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/GetDocumentAudit",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
