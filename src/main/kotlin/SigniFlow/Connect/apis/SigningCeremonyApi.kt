/**
* SigniFlow OpenAPI Spec v1
* ## SigniFlow API used to automate esignature workflow creation and management. 
*
* The version of the OpenAPI document: 1.0
* Contact: support@signiflow.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package SigniFlow.Connect.apis

import SigniFlow.Connect.models.MultipleSignersSigningCeremonyRequest
import SigniFlow.Connect.models.MultipleSignersSigningCeremonyResponse
import SigniFlow.Connect.models.SigningCeremonyV2Request
import SigniFlow.Connect.models.SigningCeremonyV2Response

import SigniFlow.Connect.infrastructure.ApiClient
import SigniFlow.Connect.infrastructure.ClientException
import SigniFlow.Connect.infrastructure.ClientError
import SigniFlow.Connect.infrastructure.ServerException
import SigniFlow.Connect.infrastructure.ServerError
import SigniFlow.Connect.infrastructure.MultiValueMap
import SigniFlow.Connect.infrastructure.RequestConfig
import SigniFlow.Connect.infrastructure.RequestMethod
import SigniFlow.Connect.infrastructure.ResponseType
import SigniFlow.Connect.infrastructure.Success
import SigniFlow.Connect.infrastructure.toMultiValue

class SigningCeremonyApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("SigniFlow.Connect.baseUrl", "https://server-url/API/SignFlowAPIServiceRest.svc")
        }
    }

    /**
    * Multiple Signers Signing Ceremony
    * #### Used when there are multiple signers on a document.
    * @param contentType  
    * @param multipleSignersSigningCeremonyRequest ##### Multiple Signers Signing Ceremony Request Model (optional)
    * @return MultipleSignersSigningCeremonyResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postMultipleSignersSigningCeremony(contentType: kotlin.String, multipleSignersSigningCeremonyRequest: MultipleSignersSigningCeremonyRequest?) : MultipleSignersSigningCeremonyResponse {
        val localVariableConfig = postMultipleSignersSigningCeremonyRequestConfig(contentType = contentType, multipleSignersSigningCeremonyRequest = multipleSignersSigningCeremonyRequest)

        val localVarResponse = request<MultipleSignersSigningCeremonyResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultipleSignersSigningCeremonyResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postMultipleSignersSigningCeremony
    *
    * @param contentType  
    * @param multipleSignersSigningCeremonyRequest ##### Multiple Signers Signing Ceremony Request Model (optional)
    * @return RequestConfig
    */
    fun postMultipleSignersSigningCeremonyRequestConfig(contentType: kotlin.String, multipleSignersSigningCeremonyRequest: MultipleSignersSigningCeremonyRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = multipleSignersSigningCeremonyRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/MultipleSignersSigningCeremony",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Signing Ceremony V2
    * #### Used to initiate the signing process of a document.
    * @param contentType  
    * @param signingCeremonyV2Request ##### Signing Ceremony V2 Request Model (optional)
    * @return SigningCeremonyV2Response
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postSigningCeremonyV2(contentType: kotlin.String, signingCeremonyV2Request: SigningCeremonyV2Request?) : SigningCeremonyV2Response {
        val localVariableConfig = postSigningCeremonyV2RequestConfig(contentType = contentType, signingCeremonyV2Request = signingCeremonyV2Request)

        val localVarResponse = request<SigningCeremonyV2Response>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SigningCeremonyV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postSigningCeremonyV2
    *
    * @param contentType  
    * @param signingCeremonyV2Request ##### Signing Ceremony V2 Request Model (optional)
    * @return RequestConfig
    */
    fun postSigningCeremonyV2RequestConfig(contentType: kotlin.String, signingCeremonyV2Request: SigningCeremonyV2Request?) : RequestConfig {
        val localVariableBody: kotlin.Any? = signingCeremonyV2Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/SigningCeremonyV2",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
